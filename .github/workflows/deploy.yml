name: Build & Deploy Mautic
on:
  push: { branches: [ Live ] }
  workflow_dispatch: {}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect NPM_DIR & lockfile
        run: |
          if [ -f docroot/package.json ]; then echo "NPM_DIR=docroot" >> $GITHUB_ENV; else echo "NPM_DIR=." >> $GITHUB_ENV; fi
          if [ -f "${NPM_DIR:-.}/package-lock.json" ]; then echo "HAS_LOCK=true"  >> $GITHUB_ENV; else echo "HAS_LOCK=false" >> $GITHUB_ENV; fi
          echo "NPM_DIR=${NPM_DIR:-.}, HAS_LOCK=${HAS_LOCK:-false}"

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2
          extensions: intl, mbstring, curl, zip

      - name: Composer install (no dev)
        run: composer install --no-interaction --no-progress --prefer-dist --no-dev --optimize-autoloader

      # Node setup (reliable)
      - name: Setup Node 20 (with cache)
        if: env.HAS_LOCK == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.NPM_DIR }}/package-lock.json

      - name: Setup Node 20 (no cache)
        if: env.HAS_LOCK != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: NPM install
        working-directory: ${{ env.NPM_DIR }}
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          if [ "${HAS_LOCK}" = "true" ]; then
            npm ci --no-audit --prefer-offline
          else
            npm install --no-audit
          fi

      - name: Build frontend assets
        working-directory: ${{ env.NPM_DIR }}
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: npm run build

      - name: Make deploy bundle
        run: |
          mkdir -p artifact
          rsync -a \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "docroot/node_modules" \
            --exclude "var/*" \
            --exclude "docroot/var/*" \
            --exclude "config/local.php" \
            ./ artifact/
          # include built assets for a separate upload (preserves user uploads)
          rsync -a docroot/media/ artifact/docroot/media/ 2>/dev/null || true

      - name: Upload code to server (rsync)
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: >-
            -az --delete
            --exclude='/config' --exclude='/config/**'
            --exclude='/var' --exclude='/var/**'
            --exclude='/docroot/media' --exclude='/docroot/media/**'
            --filter='P /config' --filter='P /var' --filter='P /docroot/media'
          path: "artifact/"
          remote_path: "${{ secrets.REMOTE_PATH }}/"
          remote_host: "${{ secrets.SSH_HOST }}"
          remote_user: "${{ secrets.SSH_USER }}"
          remote_key: "${{ secrets.SSH_KEY }}"
          remote_port: "${{ secrets.SSH_PORT }}"

      - name: Upload built assets (docroot/media only)
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: "-az --no-perms --no-owner --no-group"
          path: "artifact/docroot/media/"
          remote_path: "${{ secrets.REMOTE_PATH }}/docroot/media/"
          remote_host: "${{ secrets.SSH_HOST }}"
          remote_user: "${{ secrets.SSH_USER }}"
          remote_key: "${{ secrets.SSH_KEY }}"
          remote_port: "${{ secrets.SSH_PORT }}"

      # TEMP: force HTTPS -> /docroot until vhost docroot is fixed
      - name: Ensure root .htaccess redirects to /docroot (temp)
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            BASE="${{ secrets.REMOTE_PATH }}"
            cat > "$BASE/.htaccess" <<'HT'
RewriteEngine On
RewriteRule ^(.*)$ docroot/$1 [L,R=302]
HT

      - name: Finalize on server (ownership, perms, cache)
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            umask 002

            DIR="${{ secrets.REMOTE_PATH }}"
            OWNER="${{ secrets.CPANEL_USER }}"
            PHP_CLI="${{ secrets.PHP_CLI:-/opt/cpanel/ea-php83/root/usr/bin/php }}"
            PHP="$PHP_CLI -d memory_limit=768M"

            cd "$DIR"
            mkdir -p var docroot/media

            # Remove immutable/append-only attrs; harmless if absent
            command -v chattr >/dev/null && chattr -R -i -a "$DIR/var" "$DIR/docroot/media" || true
            # Drop ACLs if any; harmless if absent
            command -v setfacl >/dev/null && setfacl -b -R "$DIR/var" "$DIR/docroot/media" || true

            # Re-own runtime dirs to cPanel user if SSH user is root
            if [ "$(id -u)" -eq 0 ] && [ -n "${OWNER:-}" ]; then
              chown -R "$OWNER:$OWNER" "$DIR/var" "$DIR/docroot/media"
            fi

            # Writable perms
            find var docroot/media -type d -exec chmod 775 {} \; || true
            find var docroot/media -type f -exec chmod 664 {} \; || true

            # Clean prod cache (avoid stale root-owned files)
            rm -rf var/cache/prod || true
            mkdir -p var/cache/prod

            # Ensure DirectoryIndex and LSCache off during setup
            grep -q 'DirectoryIndex' docroot/.htaccess 2>/dev/null || echo 'DirectoryIndex index.php index.html' >> docroot/.htaccess
            if ! grep -q 'FilesMatch "^(?!index\\.php\\$)(?!upgrade/upgrade\\.php\\$).+\\.php\\$"' docroot/.htaccess 2>/dev/null; then
              cat >> docroot/.htaccess <<'HTPHP'
                # Apache 2.4+
                <IfModule authz_core_module>
                    <FilesMatch "^(?!index\.php$)(?!upgrade/upgrade\.php$).+\.php$">
                        Require all denied
                    </FilesMatch>
                    <FilesMatch "^(composer\.json|composer\.lock)$">
                        Require all denied
                    </FilesMatch>
                </IfModule>
                # Fallback for Apache < 2.4
                <IfModule !authz_core_module>
                    <FilesMatch "^(?!index\.php$)(?!upgrade/upgrade\.php$).+\.php$">
                        Order allow,deny
                        Deny from all
                    </FilesMatch>
                    <FilesMatch "^(composer\.json|composer\.lock)$">
                        Order allow,deny
                        Deny from all
                    </FilesMatch>
                </IfModule>
                HTPHP
            fi

            # Helper to run as cPanel user so new files are owned correctly
            RUN_AS_OWNER() {
              if [ "$(id -u)" -eq 0 ] && [ -n "${OWNER:-}" ]; then
                su -s /bin/bash - "$OWNER" -c "$*"
              else
                bash -lc "$*"
              fi
            }

            # (Assets already uploaded; this is safe to ignore if it warns)
            RUN_AS_OWNER "$PHP bin/console mautic:assets:generate --env=prod -vvv" || true
            # Run migrations only if DB creds exist
            if $PHP -r '
              $f="config/local.php"; if(!file_exists($f)) exit(1);
              $ret = include $f;
              $c = is_array($ret) ? $ret : (function() use($f){ $parameters=[]; include $f; return $parameters; })();
              exit( empty($c["db_name"]) || empty($c["db_user"]) || !array_key_exists("db_password",$c) );
            '; then
              RUN_AS_OWNER "$PHP bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration" || true
            fi
            RUN_AS_OWNER "$PHP bin/console cache:clear --env=prod -vvv" || true
